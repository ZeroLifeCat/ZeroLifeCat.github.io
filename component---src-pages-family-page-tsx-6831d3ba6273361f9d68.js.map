{"version":3,"sources":["webpack:///./src/components/VP-Intro-Card.js","webpack:///./src/pages/Family-Page.tsx","webpack:///./src/components/seo.js"],"names":["card","props","className","info","department","name","portrait","intro","VpArray","VPs","SecondPage","bannerName","title","VPCards","rows","i","push","key","id","index","parseInt","createVPCards","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"sLAmBeA,G,UAfF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,WACb,0BAAMA,UAAU,SAAhB,OACA,0BAAMA,UAAU,SAAhB,OACA,0BAAMA,UAAU,cAAcD,EAAME,KAAKC,aAE3C,kBAAC,IAAD,CAAOC,KAAMJ,EAAME,KAAKG,WACxB,yBAAKJ,UAAU,YACb,4BAAKD,EAAME,KAAKE,MAChB,2BAAIJ,EAAME,KAAKI,WCPjBC,E,UAAiBC,IAwBNC,UARK,SAACT,GAAD,OAClB,kBAAC,IAAD,CAAQU,WAAW,sBACjB,kBAAC,IAAD,CAAKC,MAAM,gBACX,kDACA,6BAnBJ,SAAuBJ,GACrB,IAAIK,EAAU,GACVC,EAAO,GACX,IAAK,IAAIC,KAAKP,EAAS,EACrB,SAAEO,GAAOF,EAAQG,KAAK,kBAAC,EAAD,CAAQb,KAAMK,EAAQO,GAAIE,IAAKT,EAAQO,GAAGG,MAAhE,CACGH,GACD,IAAII,EAAQC,SAASL,GAClBI,EAAM,GAAG,IACVL,EAAKE,KAAK,yBAAKd,UAAY,UAAUe,KAAME,EAAM,GAAG,GAAIN,IACxDA,EAAU,IAGhB,OAAOC,EAOCO,CAAcb,O,o2DC3BxB,iDAYA,SAASc,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMb,EAAS,EAATA,MAC9Bc,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFZ,MAAOA,EACPmB,cAAa,QAAUL,EAAKG,aAAajB,MACzCa,KAAM,CACJ,CACEpB,KAAK,cACL2B,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASpB,GAEX,CACEqB,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACE3B,KAAK,eACL2B,QAAQ,WAEV,CACE3B,KAAK,kBACL2B,QAASN,EAAKG,aAAaK,QAE7B,CACE7B,KAAK,gBACL2B,QAASpB,GAEX,CACEP,KAAK,sBACL2B,QAASJ,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-family-page-tsx-6831d3ba6273361f9d68.js","sourcesContent":["import React from \"react\"\r\nimport Image from \"../components/image\"\r\nimport \"../styles/VP-Intro-Card.css\"\r\n\r\nconst card = props => (\r\n  <div className=\"CardContainer\">\r\n    <div className=\"heading\">\r\n      <span className=\"deco2\">hhh</span>\r\n      <span className=\"deco1\">hhh</span>\r\n      <span className=\"department\">{props.info.department}</span>\r\n    </div>\r\n    <Image name={props.info.portrait} />\r\n    <div className=\"textbody\">\r\n      <h2>{props.info.name}</h2>\r\n      <p>{props.info.intro}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default card\r\n","// Gatsby supports TypeScript natively!\r\nimport React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport VpCard from \"../components/VP-Intro-Card\"\r\nimport VPinfo from '../texts/VP.json'\r\n\r\nvar VpArray = VPinfo.VPs;\r\nfunction createVPCards(VpArray) {\r\n  var VPCards = [];\r\n  var rows = [];\r\n  for (var i in VpArray) {\r\n    ((i) => (VPCards.push(<VpCard info={VpArray[i]} key={VpArray[i].id}/>)))\r\n      (i);\r\n      var index = parseInt(i);\r\n      if(index%3==2){\r\n        rows.push(<div className = \"cardRow\" key={(index+1)/3}>{VPCards}</div>);\r\n        VPCards = [];\r\n      }\r\n  }\r\n  return rows;\r\n}\r\n\r\nconst SecondPage = ((props) => (\r\n  <Layout bannerName=\"Family_Page_Banner\">\r\n    <SEO title=\"CSSA-Family\" />\r\n    <h1>Board Of Directors</h1>\r\n    <div>{createVPCards(VpArray)}</div>\r\n  </Layout>\r\n))\r\n\r\nexport default SecondPage","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}